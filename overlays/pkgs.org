#+STARTUP: show2levels indent hidestars


* emoji
#+begin_src config
· ‥ ⁖ ⁘
#+end_src
* stdenv
#+begin_src nix
# auto-update bot
passthru.updateScript = nix-update-script { attrPath = pname; };

# fonts
installPhase = ''
  runHook preInstall
  mkdir -p $out/share/fonts/truetype
  install -D *.{ttf,TTF} $out/share/fonts/truetype/
  runHook postInstall
'';
#+end_src
** templates
#+begin_src nix
{ lib
, stdenv
, fetchFromGitHub
}:

stdenv.mkDerivation rec {
  pname = "hashrat";
  version = "1.15";

  src = fetchFromGitHub {
    owner = "ColumPaget";
    repo = "Hashrat";
    rev = "v${version}";
    hash = "sha256-+3IPCJS++7CE0ZrJb62LCRrAn2J4uCF3a1oOzDoOW0w=";
  };

  configureFlags = [ "--enable-xattr" ];

  makeFlags = [ "PREFIX=$(out)" ];

  meta = with lib; {
    description = "Command-line hash-generation utility";
    longDescription = ''
      Hashing tool supporting md5,sha1,sha256,sha512,whirlpool,jh and hmac versions of these.
      Includes recursive file hashing and other features.
    '';
    homepage = "http://www.cjpaget.co.uk/Code/Hashrat";
    license = licenses.gpl3Plus;
    platforms = platforms.unix;
    maintainers = with maintainers; [ zendo ];
  };
}
#+end_src
* buildGoModule
** templates
#+begin_src nix
  { lib
  , fetchFromGitHub
  , buildGoModule
  , mpv
  , makeWrapper
  , installShellFiles
  , nix-update-script
  , testers
  , radioboat
  }:

  buildGoModule rec {
    pname = "radioboat";
    version = "0.2.1";

    src = fetchFromGitHub {
      owner = "slashformotion";
      repo = "radioboat";
      rev = "v${version}";
      hash = "sha256-ZAKTWmK3hCJxm/578cjtdgMA2ZRhCFtzfGdta0gmuFY=";
    };

    subPackages = ["."];

    proxyVendor = true;

    deleteVendor = true;

    vendorHash = "sha256-X3KiqaiOQYQBfVckh50C+4oxIVN6gXyNuQtBwGvjdFQ=";

    ldflags = [
      "-s"
      "-w"
      "-X github.com/slashformotion/radioboat/internal/buildinfo.Version=${version}"
    ];

    nativeBuildInputs = [ makeWrapper installShellFiles ];

    preBuild = ''
    export CGO_ENABLED=0
  '';

    preFixup = ''
      wrapProgram $out/bin/radioboat --prefix PATH ":" "${lib.makeBinPath [ mpv ]}";
    '';

    postInstall = ''
      installShellCompletion --cmd radioboat \
        --bash <($out/bin/radioboat completion bash) \
        --fish <($out/bin/radioboat completion fish) \
        --zsh <($out/bin/radioboat completion zsh)
    '';

    passthru = {
      updateScript = nix-update-script { attrPath = pname; };
      tests.version = testers.testVersion {
        package = radioboat;
        command = "radioboat version";
        version = version;
      };
    };

    meta = with lib; {
      description = "A terminal web radio client";
      homepage = "https://github.com/slashformotion/radioboat";
      license = licenses.asl20;
      platforms = platforms.linux;
      maintainers = with maintainers; [ zendo ];
    };
  }

#+end_src
** notes
#+begin_src nix

#+end_src

**
* buildRustPackage
** templates
#+begin_src nix
  { lib
  , fetchFromGitHub
  , rustPlatform
  , pkg-config
  , libxkbcommon
  }:

  rustPlatform.buildRustPackage rec {
    pname = "zee";
    version = "0.3.1";

    src = fetchFromGitHub {
      owner = "mcobzarenco";
      repo = pname;
      rev = "v${version}";
      fetchSubmodules = true;
      hash = "sha256-0vHvzxdtxTsGVq1iJezjHCB0NKF5bCqMIrD15gOWcvE=";
    };

    cargoHash = "sha256-eXCbTM6+oLRIY4LIlrFs53V8IqYGhZyku48AgXmeYs8=";

    nativeBuildInputs = [pkg-config];
    buildInputs = [openssl tree-sitter];

    # Needed to get openssl-sys to use pkg-config.
    OPENSSL_NO_VENDOR = 1;

    meta = with lib; {
      description = "Modern editor for the terminal";
      homepage = "https://github.com/mcobzarenco/zee";
      license = licenses.mit;
      maintainers = with maintainers; [ zendo ];
    };
  }

#+end_src

** gui gtk4
#+begin_src nix
  {
    lib,
    stdenv,
    fetchFromGitLab,
    rustPlatform,
    desktop-file-utils,
    appstream-glib,
    meson,
    ninja,
    pkg-config,
    reuse,
    wrapGAppsHook,
    glib,
    gtk4,
    gst_all_1,
    libadwaita,
    dbus,
  }:
  stdenv.mkDerivation rec {
    pname = "amberol";
    version = "0.3.0";

    src = fetchFromGitLab {
      domain = "gitlab.gnome.org";
      owner = "ebassi";
      repo = pname;
      rev = version;
      hash = "sha256-+9lrSkjk7V+ZnIhmhw7lEiEywDp5adoAW+5PEAlhpSI=";
    };

    cargoDeps = rustPlatform.fetchCargoTarball {
      inherit src;
      name = "${pname}-${version}";
      hash = "sha256-ZJiD6RshEjZ7h+/KYcY+ZjL5fHRb5+RKgIdgbD6LdkA=";
    };

    postPatch = ''
      patchS
      hebangs build-aux
    '';

    nativeBuildInputs = [
      appstream-glib
      desktop-file-utils
      meson
      ninja
      pkg-config
      reuse
      wrapGAppsHook
    ]
    ++ (with rustPlatform; [
      cargoSetupHook
      rust.cargo
      rust.rustc
    ]);

    buildInputs = [
      glib
      gtk4
      libadwaita
      dbus
    ]  ++ (with gst_all_1; [
      gstreamer
      gst-libav
      gst-plugins-base
      gst-plugins-good
      gst-plugins-bad
      gst-plugins-ugly
    ]);

    meta = with lib; {
      homepage = "https://gitlab.gnome.org/ebassi/amberol";
      description = "A small and simple sound and music player";
      license = licenses.gpl3Plus;
      platforms = platforms.linux;
      maintainers = with maintainers; [ linsui ];
    };
  }

#+end_src
* buildPythonApplication
** notes
#+begin_src nix

  # dialect / gnome-frog

  # setup.py and pyproject.toml not found
  format = "other";

  buildPhase = "./build.py";

  installPhase = "./install.py";

  # Specify runtime dependencies for the package
  propagatedBuildInputs = with python3.pkgs; [pyyaml];

  postPatch = ''
    chmod +x build-aux/meson/postinstall.py
    patchShebangs build-aux/meson/postinstall.py
    ----------------------------------
    sed -i '21,41d' meson.build # 删除 21-41 行
    substituteInPlace requirements.txt \
    --replace 'PyYaml==5.4.1' 'PyYaml'
    substituteInPlace ./build-aux/meson/postinstall.py \
      --replace "gtk-update-icon-cache" "gtk4-update-icon-cache"
  '';

  # delete finnal line to stop exec postinstall.py
  patchPhase = ''
    sed -i '$ d' meson.build
  '';

  # fix gi.repository import Gio
  pythonPath = with python3.pkgs; requiredPythonModules [ pygobject3 ];

  propagatedNativeBuildInputs = [
  ];

  checkInputs = [ python3.pkgs.pytestCheckHook ];

  # checkInputs = [ python3.pkgs.pytest ];

  # checkPhase = ''
  #   export HOME=$(mktemp -d)
  #   pytest
  # '';

  pythonImportsCheck = [
    "wordbook"
  ];

  # homeless-shelter: permission denied
  preConfigure = ''
    export HOME=$(mktemp -d)
  '';

  doCheck = false;

  # This is to prevent double-wrapping the package. We'll let
  # Python do it by adding certain arguments inside of the
  # wrapper instead.
  # prevent double wrapping
  dontWrapGApps = true;
  dontWrapQtApps = true;
  dontWrapPythonPrograms = true;
  preFixup = ''
    makeWrapperArgs+=("''${gappsWrapperArgs[@]}")
    makeWrapperArgs+=("''${qtWrapperArgs[@]}")
  '';

#+end_src
**
** templates
#+begin_src nix

{ lib
, fetchFromGitHub
, python3
, meson
, ninja
, pkg-config
, glib
, gtk4
, libadwaita
, librsvg
, espeak-ng
, gobject-introspection
, wrapGAppsHook4
, appstream-glib
, desktop-file-utils
}:

python3.pkgs.buildPythonApplication rec {
  pname = "wordbook";
  version = "unstable-2022-08-30";

  format = "other";

  src = fetchFromGitHub {
    owner = "fushinari";
    repo = "Wordbook";
    rev = "f72d9e748b7e182649dc18cefe27f93cf674e4b3";
    hash = "sha256-ZL2ZgTezgH6wXxEgI2YAYOjX/DPb5irAAvyz7XGFl+U=";
  };

  nativeBuildInputs = [
    meson
    ninja
    pkg-config
    gobject-introspection
    wrapGAppsHook4
    appstream-glib
    desktop-file-utils
  ];

  buildInputs = [
    glib
    gtk4
    librsvg
    libadwaita
  ];

  propagatedBuildInputs = with python3.pkgs; [
    python-wn
    pygobject3
  ];

  dontWrapGApps = true;

  preFixup = ''
    makeWrapperArgs+=(--prefix PATH ":" \
      "${lib.makeBinPath [ espeak-ng ]}" "''${gappsWrapperArgs[@]}")
  '';

  pythonImportsCheck = [
    "wordbook"
  ];

  meta = with lib; {
    description = "Offline English-English dictionary application built for GNOME";
    homepage = "https://github.com/fushinari/Wordbook";
    license = licenses.gpl3Plus;
    platforms = platforms.linux;
    maintainers = with maintainers; [ zendo ];
  };
}
#+end_src
* buildNimPackage
#+begin_src nix
{ lib, nimPackages, fetchFromGitHub, }:

nimPackages.buildNimPackage rec {
  pname = "nitch";
  version = "0.1.6";

  nimBinOnly = true;

  src = fetchFromGitHub {
    owner = "unxsh";
    repo = "nitch";
    rev = version;
    hash = "sha256-m4UG5oVZ+/7jk1f7rOe8wP97Jt0yIFcAPU+doeMe2Hw=";
  };

  # buildInputs = [ termbox pcre ]
  #   ++ (with nimPackages; [ noise nimbox lscolors ]);

  meta = with lib; {
    description = "Incredibly fast system fetch written in nim";
    homepage = "https://github.com/unxsh/nitch";
    license = licenses.mit;
    platforms = platforms.unix;
    maintainers = [ maintainers.zendo ];
  };
}
#+end_src
* mkYarnPackage
** notes
yarn2nix > yarn.nix
If you have not generated a yarn.lock file before, run
yarn install


#+begin_src nix
buildPhase = ''
  yarn build --offline
'';

distPhase = "true";

configurePhase = "ln -s $node_modules node_modules";
#+end_src
* buildCrystalPackage
#+begin_src shell
git checkout version
nix shell nixpkgs#shards nixpkgs#crystal2nix
shards lock
crystal2nix
#+end_src
* electron & appimageTool
https://github.com/nix-community/nur-combined/blob/master/repos/yes/electronAppImage/default.nix

# maybe fix fonts
ln -s /run/current-system/sw/share/X11/fonts ~/.local/share/fonts

#+begin_src nix
    makeWrapper ${appimage-run}/bin/appimage-run $out/bin/${pname} \
      --add-flags "$src"

    makeWrapper ${electron}/bin/electron $out/bin/${pname} \
      --add-flags $out/opt/${pname}_v${version}.asar

    makeWrapper ${electron}/bin/electron "$out/bin/${pname}" \
      --add-flags "$out/share/${source.pname}/app.asar" \
      --set ELECTRON_IS_DEV 0 \
      --set NODE_ENV production
#+end_src

** templates - wrapType2
#+begin_src nix
{ lib, fetchurl, appimageTools }:

let
  pname = "museeks";
  version = "0.13.1";

  src = fetchurl {
    url = "https://github.com/martpie/museeks/releases/download/${version}/museeks-x86_64.AppImage";
    hash = "sha256-LvunhCFmpv00TnXzWjp3kQUAhoKpmp6pqKgcaUqZV+o=";
  };

  appimageContents = appimageTools.extractType2 { inherit pname version src; };
in
appimageTools.wrapType2 {
  inherit pname version src;

  extraInstallCommands = ''
    mv $out/bin/${pname}-${version} $out/bin/${pname}

    mkdir -p $out/share/${pname}
    cp -a ${appimageContents}/{locales,resources} $out/share/${pname}
    cp -a ${appimageContents}/usr/share/icons $out/share/
    install -Dm 444 ${appimageContents}/${pname}.desktop -t $out/share/applications

    substituteInPlace $out/share/applications/${pname}.desktop \
      --replace 'Exec=AppRun' 'Exec=${pname}'
  '';

  meta = with lib; {
    description = "A simple, clean and cross-platform music player";
    homepage = "https://github.com/martpie/museeks";
    license = licenses.mit;
    platforms = [ "x86_64-linux" ];
    maintainers = with maintainers; [ zendo ];
  };
}
#+end_src
** templates - stdenv
#+begin_src nix
{ lib
, stdenv
, fetchurl
, electron
, appimageTools
, makeWrapper
}:

stdenv.mkDerivation rec {
  pname = "moosync";
  version = "6.0.0";

  src = fetchurl {
    url = "https://github.com/Moosync/Moosync/releases/download/v${version}/Moosync-${version}-linux-x86_64.AppImage";
    hash = "sha256-mnrAKqNgiDvaAvOvPILvbAue3olgNfLyyFZovUl7ou8=";
  };

  nativeBuildInputs = [ makeWrapper ];

  appimageContents = appimageTools.extractType2 {
    name = "${pname}-${version}";
    inherit src;
  };

  dontUnpack = true;
  dontConfigure = true;
  dontBuild = true;

  installPhase = ''
    runHook preInstall
    mkdir -p $out/bin $out/share/${pname} $out/share/applications
    cp -a ${appimageContents}/{locales,resources} $out/share/${pname}
    cp -a ${appimageContents}/${pname}.desktop $out/share/applications/
    cp -a ${appimageContents}/usr/share/icons $out/share/
    substituteInPlace $out/share/applications/${pname}.desktop \
      --replace 'Exec=AppRun' 'Exec=${pname}'
    runHook postInstall
  '';

  postFixup = ''
    makeWrapper ${electron}/bin/electron $out/bin/${pname} \
      --add-flags $out/share/${pname}/resources/app.asar \
      --prefix LD_LIBRARY_PATH : "${lib.makeLibraryPath [ stdenv.cc.cc ]}"
  '';

    meta = with lib; {
    description = "A simple music player capable of playing local audio or from Youtube or Spotify";
    homepage = "https://moosync.app/";
    license = licenses.bsd3;
    platforms = [ "x86_64-linux" ];
    maintainers = with maintainers; [ zendo ];
  };
}

#+end_src
** deb templates
#+begin_src nix
  # 解压 DEB 包
  unpackPhase = ''
    ar x ${src}
    tar xf data.tar.xz
  '';

  # makeWrapper 可以自动生成一个调用其它命令的命令（也就是 wrapper），并且可以在原命令上修改参数、环境变量等
  buildInputs = [ makeWrapper ];

  installPhase = ''
    mkdir -p $out/bin

    # 替换菜单项目（desktop 文件）中的路径
    cp -r usr/share $out/share
    sed -i "s|Exec=.*|Exec=$out/bin/bilibili|" $out/share/applications/*.desktop

    # 复制出客户端的 Javascript 部分，其它的不要了
    cp -r opt/apps/io.github.msojocs.bilibili/files/bin/app $out/opt

    # 生成 bilibili 命令，运行这个命令时会调用 electron 加载客户端的 Javascript 包（$out/opt/app.asar）
    makeWrapper ${electron}/bin/electron $out/bin/bilibili \
      --argv0 "bilibili" \
      --add-flags "$out/opt/app.asar"
  '';
}
#+end_src

* qt
qmake: https://github.com/wineee/nur-packages/blob/main/packages/landrop/default.nix
* font-templates
#+begin_src nix
{ lib, fetchzip }:

# https://github.com/NixOS/nixpkgs/pull/175381
fetchzip rec {
  pname = "zhudou-sans";
  version = "1.000";

  url = "https://github.com/Buernia/Zhudou-Sans/archive/refs/tags/v${version}.tar.gz";

  postFetch = ''
    mkdir -p $out/share/fonts/truetype
    install -Dm644 "$out/fonts/variable ttf/Zhudou Sans-VF.ttf" $out/share/fonts/truetype
    install -Dm644 $out/fonts/ttf/*.ttf  $out/share/fonts/truetype

    shopt -s extglob dotglob
    rm -rf $out/!(share)
    shopt -u extglob dotglob
  '';

  hash = "sha256-DFTK+eKhfRCbOrgTBlJeLD5Mdi0VYwullbo2poaLIKw=";

  meta = with lib; {
    description = "A font family for CJK symbols and punctuation, derived from Noto Sans";
    homepage = "https://github.com/Buernia/Zhudou-Sans";
    license = licenses.ofl;
    platforms = platforms.all;
    maintainers = with maintainers; [ zendo ];
  };
}
#+end_src>
* miscPatch
* wrapper
#+begin_src nix
  nativeBuildInputs = [makeWrapper];
  preFixup = ''
    wrapProgram $out/bin/radioboat --prefix PATH ":" "${lib.makeBinPath [mpv]}";

    wrapProgram $out/bin/espanso \
      --prefix PATH : ${lib.makeBinPath [ libnotify xclip ]}

    wrapProgram $out/bin/code-radio --prefix LD_LIBRARY_PATH : "${alsa-lib}/lib"

  '';

  preFixup = ''
    gappsWrapperArgs+=(
      --prefix PATH : "${lib.makeBinPath [ffmpeg-full]}"
    )
  '';

  preFixup = ''
    qtWrapperArgs+=(
       --prefix PATH : "${lib.makeBinPath [ffmpeg-full]}"
    )
  '';

  postInstall = ''
    installManPage wifi-qr.1
    install -Dm444 src/resources/com.github.weclaw1.ImageRoll.desktop -t $out/share/applications/
    install -Dm444 src/resources/com.github.weclaw1.ImageRoll.svg -t $out/share/icons/hicolor/scalable/apps/
    install -Dm444 src/resources/com.github.weclaw1.ImageRoll.metainfo.xml -t $out/share/metainfo/
  '';

  postInstall = ''
    ln -s $out/bin/com.github.cassidyjames.dippi $out/bin/dippi
  '';
#+end_src
* meta
#+begin_src nix
  meta = with lib; {
    description = "";
    longDescription = ''
    '';
    homepage = "";
    license = licenses.mit;
    platforms = platforms.unix;
    maintainers = with maintainers; [ zendo ];
  };
#+end_src
