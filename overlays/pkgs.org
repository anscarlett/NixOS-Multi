#+STARTUP: show2levels indent hidestars

nix-template go -n --from-url github.com/s0md3v/Smap

* buildGoModule
** cli
#+begin_src nix
{ lib
, fetchFromGitHub
, buildGoModule
, mpv
, makeWrapper
, installShellFiles
, nix-update-script
, testers
, radioboat
}:

buildGoModule rec {
  pname = "radioboat";
  version = "0.2.1";

  src = fetchFromGitHub {
    owner = "slashformotion";
    repo = "radioboat";
    rev = "v${version}";
    sha256 = "sha256-ZAKTWmK3hCJxm/578cjtdgMA2ZRhCFtzfGdta0gmuFY=";
  };

  vendorSha256 = "sha256-X3KiqaiOQYQBfVckh50C+4oxIVN6gXyNuQtBwGvjdFQ=";

  ldflags = [
    "-s"
    "-w"
    "-X github.com/slashformotion/radioboat/internal/buildinfo.Version=${version}"
  ];

  nativeBuildInputs = [ makeWrapper installShellFiles ];

  preFixup = ''
    wrapProgram $out/bin/radioboat --prefix PATH ":" "${lib.makeBinPath [ mpv ]}";
  '';

  postInstall = ''
    installShellCompletion --cmd radioboat \
      --bash <($out/bin/radioboat completion bash) \
      --fish <($out/bin/radioboat completion fish) \
      --zsh <($out/bin/radioboat completion zsh)
  '';

  passthru = {
    updateScript = nix-update-script { attrPath = pname; };
    tests.version = testers.testVersion {
      package = radioboat;
      command = "radioboat version";
      version = version;
    };
  };

  meta = with lib; {
    description = "A terminal web radio client";
    homepage = "https://github.com/slashformotion/radioboat";
    license = licenses.asl20;
    platforms = platforms.linux;
    maintainers = with maintainers; [ zendo ];
  };
}

#+end_src
** notes
#+begin_src nix
subPackages = ["."];
#+end_src

**
* stdenv
#+begin_src nix
# auto-update bot
passthru.updateScript = nix-update-script { attrPath = pname; };

# fonts
installPhase = ''
  runHook preInstall
  mkdir -p $out/share/fonts/truetype
  install -D *.{ttf,TTF} $out/share/fonts/truetype/
  runHook postInstall
'';
#+end_src
* buildRustPackage
** cli
#+begin_src nix
{
  lib,
  fetchFromGitHub,
  rustPlatform,
  pkg-config,
  openssl,
  tree-sitter,
}:
rustPlatform.buildRustPackage rec {
  pname = "zee";
  version = "0.3.1";

  src = fetchFromGitHub {
    owner = "mcobzarenco";
    repo = pname;
    rev = "v${version}";
    fetchSubmodules = true;
    sha256 = "sha256-0vHvzxdtxTsGVq1iJezjHCB0NKF5bCqMIrD15gOWcvE=";
  };

  cargoSha256 = "sha256-eXCbTM6+oLRIY4LIlrFs53V8IqYGhZyku48AgXmeYs8=";

  nativeBuildInputs = [pkg-config];
  buildInputs = [openssl tree-sitter];

  # Needed to get openssl-sys to use pkg-config.
  OPENSSL_NO_VENDOR = 1;

  meta = with lib; {
    description = "Modern editor for the terminal";
    homepage = "https://github.com/mcobzarenco/zee";
    license = licenses.mit;
    maintainers = with maintainers; [zendo];
  };
}

#+end_src

** gui gtk4
#+begin_src nix
{
  lib,
  stdenv,
  fetchFromGitLab,
  rustPlatform,
  desktop-file-utils,
  appstream-glib,
  meson,
  ninja,
  pkg-config,
  reuse,
  wrapGAppsHook,
  glib,
  gtk4,
  gst_all_1,
  libadwaita,
  dbus,
}:
stdenv.mkDerivation rec {
  pname = "amberol";
  version = "0.3.0";

  src = fetchFromGitLab {
    domain = "gitlab.gnome.org";
    owner = "ebassi";
    repo = pname;
    rev = version;
    sha256 = "sha256-+9lrSkjk7V+ZnIhmhw7lEiEywDp5adoAW+5PEAlhpSI=";
  };

  cargoDeps = rustPlatform.fetchCargoTarball {
    inherit src;
    name = "${pname}-${version}";
    sha256 = "sha256-ZJiD6RshEjZ7h+/KYcY+ZjL5fHRb5+RKgIdgbD6LdkA=";
  };

  postPatch = ''
    patchShebangs build-aux
  '';

  nativeBuildInputs =
    [
      appstream-glib
      desktop-file-utils
      meson
      ninja
      pkg-config
      reuse
      wrapGAppsHook
    ]
    ++ (with rustPlatform; [
      cargoSetupHook
      rust.cargo
      rust.rustc
    ]);

  buildInputs = [
    glib
    gtk4
    libadwaita
    gst_all_1.gstreamer
    gst_all_1.gst-plugins-base
    gst_all_1.gst-plugins-good
    gst_all_1.gst-plugins-bad
    gst_all_1.gst-plugins-ugly
    gst_all_1.gst-libav
    dbus
  ];

  meta = with lib; {
    homepage = "https://gitlab.gnome.org/ebassi/amberol";
    description = "A small and simple sound and music player";
    maintainers = with maintainers; [linsui];
    license = licenses.gpl3Plus;
    platforms = platforms.linux;
  };
}

#+end_src
* buildPythonApplication
** notes
#+begin_src nix

  # dialect / gnome-frog

  # setup.py and pyproject.toml not found
  format = "other";

  # Specify runtime dependencies for the package
  propagatedBuildInputs = with python3.pkgs; [pyyaml];

  postPatch = ''
    chmod +x build-aux/meson/postinstall.py
    patchShebangs build-aux/meson/postinstall.py
    ----------------------------------
    substituteInPlace requirements.txt \
    --replace 'PyYaml==5.4.1' 'PyYaml'
    substituteInPlace ./build-aux/meson/postinstall.py \
      --replace "gtk-update-icon-cache" "gtk4-update-icon-cache"
  '';

  # delete finnal line to stop exec postinstall.py
  patchPhase = ''
    sed -i '$ d' meson.build
  '';

  # fix gi.repository import Gio
  pythonPath = with python3.pkgs; requiredPythonModules [ pygobject3 ];

  # propagate gi for pygobject
  propagatedNativeBuildInputs = [
    gobject-introspection
  ];

  # homeless-shelter: permission denied
  preConfigure = ''
    export HOME=$(mktemp -d)
  '';

  doCheck = false;

  # This is to prevent double-wrapping the package. We'll let
  # Python do it by adding certain arguments inside of the
  # wrapper instead.
  dontWrapGApps = true;
  preFixup = ''
    makeWrapperArgs+=("''${gappsWrapperArgs[@]}")
  '';

#+end_src
**
* buildNimPackage
#+begin_src nix
{ lib, nimPackages, fetchFromGitHub, }:

nimPackages.buildNimPackage rec {
  pname = "nitch";
  version = "0.1.6";

  nimBinOnly = true;

  src = fetchFromGitHub {
    owner = "unxsh";
    repo = "nitch";
    rev = version;
    sha256 = "sha256-m4UG5oVZ+/7jk1f7rOe8wP97Jt0yIFcAPU+doeMe2Hw=";
  };

  # buildInputs = [ termbox pcre ]
  #   ++ (with nimPackages; [ noise nimbox lscolors ]);

  meta = with lib; {
    description = "Incredibly fast system fetch written in nim";
    homepage = "https://github.com/unxsh/nitch";
    license = licenses.mit;
    platforms = platforms.unix;
    maintainers = [ maintainers.zendo ];
  };
}
#+end_src
* mkYarnPackage
** notes
yarn2nix > yarn.nix
If you have not generated a yarn.lock file before, run
yarn install


#+begin_src nix
buildPhase = ''
  yarn build --offline
'';

distPhase = "true";

configurePhase = "ln -s $node_modules node_modules";
#+end_src
* appimageTool
https://github.com/wineee/nur-packages/blob/main/packages/lx-music-desktop/default.nix

#+begin_src nix
{ lib, fetchurl, appimageTools }:

appimageTools.wrapType2 rec {
  name = "clash-verge";
  version = "1.0.0";

  src = fetchurl {
    url = "https://github.com/zzzgydi/clash-verge/releases/download/v${version}/clash-verge_${version}_amd64.AppImage";
    sha256 = "sha256-I9ZbFFPgG7ipPxu02H8W8NqrtfomeNIntBYdDGxyyg4=";
  };

  meta = with lib; {
    homepage = "https://github.com/zzzgydi/clash-verge";
    description = "A Clash GUI based on tauri";
    maintainers = with maintainers; [zendo];
    platforms = platforms.linux;
    license = licenses.gpl3;
  };
}
#+end_src
* qt
qmake: https://github.com/wineee/nur-packages/blob/main/packages/landrop/default.nix
* Desktop
** codecs
#+begin_src nix
gst_all_1.gstreamer
gst_all_1.gst-plugins-base
gst_all_1.gst-plugins-good
gst_all_1.gst-plugins-bad
gst_all_1.gst-plugins-ugly
gst_all_1.gst-libav
#+end_src
* miscPatch
* wrapper
#+begin_src nix
  nativeBuildInputs = [makeWrapper];
  preFixup = ''
    wrapProgram $out/bin/radioboat --prefix PATH ":" "${lib.makeBinPath [mpv]}";

    wrapProgram $out/bin/espanso \
      --prefix PATH : ${lib.makeBinPath [ libnotify xclip ]}

    wrapProgram $out/bin/code-radio --prefix LD_LIBRARY_PATH : "${alsa-lib}/lib"

  '';

  preFixup = ''
    gappsWrapperArgs+=(
      --prefix PATH : "${lib.makeBinPath [ffmpeg-full]}"
    )
  '';

  preFixup = ''
    qtWrapperArgs+=(
       --prefix PATH : "${lib.makeBinPath [ffmpeg-full]}"
    )
  '';

  postInstall = ''
    install -Dm444 src/resources/com.github.weclaw1.ImageRoll.desktop -t $out/share/applications/
    install -Dm444 src/resources/com.github.weclaw1.ImageRoll.svg -t $out/share/icons/hicolor/scalable/apps/
    install -Dm444 src/resources/com.github.weclaw1.ImageRoll.metainfo.xml -t $out/share/metainfo/
  '';
#+end_src
* meta
#+begin_src nix
  meta = with lib; {
    description = "";
    longDescription = ''
    '';
    homepage = "";
    license = licenses.mit;
    platforms = platforms.unix;
    maintainers = with maintainers; [
      somebody
    ];
  };
#+end_src
