#+STARTUP: show2levels indent hidestars

* buildRustPackage
** cargo.lock script

cargoPatches = [ ./cargo-lock.patch ];

#+begin_src nix
#!nix-shell
#!nix-shell -i bash -p coreutils gnugrep git cargo

# Copy from pkgs/applications/audio/netease-music-tui/update-cargo-lock.sh

set -eu -o verbose

here=$PWD
version=$(cat < default.nix | grep '^  version = "' | cut -d '"' -f 2)
checkout=$(mktemp -d)
git clone -b "$version" --depth=1 https://github.com/betta-cyber/netease-music-tui "$checkout"
cd "$checkout"

cargo generate-lockfile
git add -f Cargo.lock
git diff HEAD -- Cargo.lock > "$here"/cargo-lock.patch

cd "$here"
rm -rf "$checkout"
#+end_src>

* buildPythonApplication
** notes
#+begin_src nix

  buildPhase = "./build.py";

  installPhase = "./install.py";

  postPatch = ''
    chmod +x build-aux/meson/postinstall.py
    patchShebangs build-aux/meson/postinstall.py
    ----------------------------------
    sed -i '21,41d' meson.build # 删除 21-41 行
    substituteInPlace requirements.txt \
      --replace 'PyYaml==5.4.1' 'PyYaml'
    substituteInPlace ./build-aux/meson/postinstall.py \
      --replace "gtk-update-icon-cache" "gtk4-update-icon-cache"
  '';

  # delete finnal line to stop exec postinstall.py
  patchPhase = ''
    sed -i '$ d' meson.build
  '';

  checkInputs = [ python3.pkgs.pytestCheckHook ];

  # checkInputs = [ python3.pkgs.pytest ];

  # checkPhase = ''
  #   export HOME=$(mktemp -d)
  #   pytest
  # '';

  # homeless-shelter: permission denied
  preConfigure = ''
    export HOME=$(mktemp -d)
  '';

  doCheck = false;

  # This is to prevent double-wrapping the package. We'll let
  # Python do it by adding certain arguments inside of the
  # wrapper instead.
  # prevent double wrapping
  dontWrapGApps = true;
  dontWrapQtApps = true;
  dontWrapPythonPrograms = true;
  preFixup = ''
    makeWrapperArgs+=("''${gappsWrapperArgs[@]}")
    makeWrapperArgs+=("''${qtWrapperArgs[@]}")
  '';

#+end_src
**
** templates
#+begin_src nix

{ lib
, fetchFromGitHub
, python3
, meson
, ninja
, pkg-config
, glib
, gtk4
, libadwaita
, librsvg
, espeak-ng
, gobject-introspection
, wrapGAppsHook4
, appstream-glib
, desktop-file-utils
}:

python3.pkgs.buildPythonApplication rec {
  pname = "wordbook";
  version = "unstable-2022-08-30";

  format = "other";

  src = fetchFromGitHub {
    owner = "fushinari";
    repo = "Wordbook";
    rev = "f72d9e748b7e182649dc18cefe27f93cf674e4b3";
    hash = "sha256-ZL2ZgTezgH6wXxEgI2YAYOjX/DPb5irAAvyz7XGFl+U=";
  };

  nativeBuildInputs = [
    meson
    ninja
    pkg-config
    gobject-introspection
    wrapGAppsHook4
    appstream-glib
    desktop-file-utils
  ];

  buildInputs = [
    glib
    gtk4
    librsvg
    libadwaita
  ];

  propagatedBuildInputs = with python3.pkgs; [
    python-wn
    pygobject3
  ];

  dontWrapGApps = true;

  preFixup = ''
    makeWrapperArgs+=(--prefix PATH ":" \
      "${lib.makeBinPath [ espeak-ng ]}" "''${gappsWrapperArgs[@]}")
  '';

  pythonImportsCheck = [
    "wordbook"
  ];

  meta = with lib; {
    description = "Offline English-English dictionary application built for GNOME";
    homepage = "https://github.com/fushinari/Wordbook";
    license = licenses.gpl3Plus;
    platforms = platforms.linux;
    maintainers = with maintainers; [ zendo ];
  };
}
#+end_src

* buildNimPackage
#+begin_src nix
{ lib, nimPackages, fetchFromGitHub, }:

nimPackages.buildNimPackage rec {
  pname = "nitch";
  version = "0.1.6";

  nimBinOnly = true;

  src = fetchFromGitHub {
    owner = "unxsh";
    repo = "nitch";
    rev = version;
    hash = "sha256-m4UG5oVZ+/7jk1f7rOe8wP97Jt0yIFcAPU+doeMe2Hw=";
  };

  # buildInputs = [ termbox pcre ]
  #   ++ (with nimPackages; [ noise nimbox lscolors ]);

  meta = with lib; {
    description = "Incredibly fast system fetch written in nim";
    homepage = "https://github.com/unxsh/nitch";
    license = licenses.mit;
    platforms = platforms.unix;
    maintainers = [ maintainers.zendo ];
  };
}
#+end_src

* buildCrystalPackage
#+begin_src shell
git checkout version
nix shell nixpkgs#shards nixpkgs#crystal2nix
shards lock
crystal2nix
#+end_src

* java

#+begin_src nix
{ stdenv
, lib
, fetchurl
, copyDesktopItems
, makeDesktopItem
, makeWrapper
, jre
, libpulseaudio
, libXxf86vm
}:
let
  desktopItem = makeDesktopItem {
    name = "unciv";
    exec = "unciv";
    comment = "An open-source Android/Desktop remake of Civ V";
    desktopName = "Unciv";
    categories = [ "Game" ];
  };

  envLibPath = lib.makeLibraryPath [
    libpulseaudio
    libXxf86vm
  ];

in
stdenv.mkDerivation rec {
  pname = "unciv";
  version = "4.2.20";

  src = fetchurl {
    url = "https://github.com/yairm210/Unciv/releases/download/${version}/Unciv.jar";
    sha256 = "sha256-SsEOewFbJqad8OCRiE1VHOx7kVFtF4DEInE3ETCGxDM=";
  };

  dontUnpack = true;

  nativeBuildInputs = [ copyDesktopItems makeWrapper ];

  installPhase = ''
    runHook preInstall
    makeWrapper ${jre}/bin/java $out/bin/unciv \
      --prefix LD_LIBRARY_PATH : ${envLibPath} \
      --prefix PATH : ${lib.makeBinPath [ jre ]} \
      --add-flags "-jar ${src}"
    runHook postInstall
  '';

  desktopItems = [ desktopItem ];

  meta = with lib; {
    description = "An open-source Android/Desktop remake of Civ V";
    homepage = "https://github.com/yairm210/Unciv";
    maintainers = with maintainers; [ tex ];
    sourceProvenance = with sourceTypes; [ binaryBytecode ];
    license = licenses.mpl20;
    platforms = [ "x86_64-linux" ];
  };
}
#+end_src

* appimageTool

** AppImage - wrapType2
#+begin_src nix
  { lib, fetchurl, appimageTools }:

  let
    pname = "museeks";
    version = "0.13.1";

    src = fetchurl {
      url = "https://github.com/martpie/museeks/releases/download/${version}/museeks-x86_64.AppImage";
      hash = "sha256-LvunhCFmpv00TnXzWjp3kQUAhoKpmp6pqKgcaUqZV+o=";
    };

    appimageContents = appimageTools.extractType2 { inherit pname version src; };
  in
  appimageTools.wrapType2 {
    inherit pname version src;

    extraPkgs = pkgs: with pkgs; [
      libsecret
      libappindicator-gtk3
    ];

    extraInstallCommands = ''
      mv $out/bin/${pname}-${version} $out/bin/${pname}

      mkdir -p $out/share/${pname}
      cp -a ${appimageContents}/{locales,resources} $out/share/${pname}
      cp -a ${appimageContents}/usr/share/icons $out/share/
      install -Dm 444 ${appimageContents}/${pname}.desktop -t $out/share/applications

      substituteInPlace $out/share/applications/${pname}.desktop \
        --replace 'Exec=AppRun' 'Exec=${pname}'
    '';

    meta = with lib; {
      description = "A simple, clean and cross-platform music player";
      homepage = "https://github.com/martpie/museeks";
      license = licenses.mit;
      platforms = [ "x86_64-linux" ];
      maintainers = with maintainers; [ zendo ];
    };
  }
#+end_src

** AppImage - stdenv
#+begin_src nix
{ lib
, stdenv
, fetchurl
, electron
, appimageTools
, makeWrapper
}:

stdenv.mkDerivation rec {
  pname = "moosync";
  version = "6.0.0";

  src = fetchurl {
    url = "https://github.com/Moosync/Moosync/releases/download/v${version}/Moosync-${version}-linux-x86_64.AppImage";
    hash = "sha256-mnrAKqNgiDvaAvOvPILvbAue3olgNfLyyFZovUl7ou8=";
  };

  nativeBuildInputs = [ makeWrapper ];

  appimageContents = appimageTools.extractType2 {
    name = "${pname}-${version}";
    inherit src;
  };

  dontUnpack = true;
  dontConfigure = true;
  dontBuild = true;

  installPhase = ''
    runHook preInstall
    mkdir -p $out/bin $out/share/${pname} $out/share/applications
    cp -a ${appimageContents}/{locales,resources} $out/share/${pname}
    cp -a ${appimageContents}/${pname}.desktop $out/share/applications/
    cp -a ${appimageContents}/usr/share/icons $out/share/
    substituteInPlace $out/share/applications/${pname}.desktop \
      --replace 'Exec=AppRun' 'Exec=${pname}'
    runHook postInstall
  '';

  postFixup = ''
    makeWrapper ${electron}/bin/electron $out/bin/${pname} \
      --add-flags $out/share/${pname}/resources/app.asar \
      --prefix LD_LIBRARY_PATH : "${lib.makeLibraryPath [ stdenv.cc.cc ]}"
  '';

    meta = with lib; {
    description = "A simple music player capable of playing local audio or from Youtube or Spotify";
    homepage = "https://moosync.app/";
    license = licenses.bsd3;
    platforms = [ "x86_64-linux" ];
    maintainers = with maintainers; [ zendo ];
  };
}
#+end_src

* electron

cat pkgs/servers/web-apps/outline/default.nix
cat pkgs/servers/web-apps/hedgedoc/default.nix

#+begin_src nix
  buildPhase = ''
    runHook preBuild

    yarn --offline electron-builder \
      --dir --linux --x64 \
      -c.electronDist=${electron}/lib/electron \
      -c.electronVersion=${electron.version}

    runHook postBuild
  '';

  mkdir -p $out/share/{applications,${pname}}
  cp deps/${pname}/dist/linux-unpacked/resources/app.asar $out/share/${pname}
#+end_src

#+begin_src nix

  makeWrapper ${electron}/bin/electron $out/bin/${pname} \
    --add-flags $out/share/${pname}/app.asar

  makeWrapper ${electron}/bin/electron $out/bin/${pname} \
    --argv0 "${pname}" \
    --add-flags "$out/share/${pname}"

  makeWrapper ${electron}/bin/electron "$out/bin/${pname}" \
    --add-flags "$out/share/${source.pname}/app.asar" \
    --set ELECTRON_IS_DEV 0 \
    --set NODE_ENV production
#+end_src

* wrapper
#+begin_src nix
  nativeBuildInputs = [makeWrapper];
  preFixup = ''
    wrapProgram $out/bin/radioboat --prefix PATH ":" "${lib.makeBinPath [mpv]}";

    wrapProgram $out/bin/espanso \
      --prefix PATH : ${lib.makeBinPath [ libnotify xclip ]}

    wrapProgram $out/bin/code-radio --prefix LD_LIBRARY_PATH : "${alsa-lib}/lib"

  '';

  preFixup = ''
    gappsWrapperArgs+=(    // qtWrapperArgs+=(
      --prefix PATH : "${lib.makeBinPath [ffmpeg-full]}"
    )
  '';

  postInstall = ''
    installManPage wifi-qr.1
    install -Dm444 src/resources/com.github.weclaw1.ImageRoll.desktop -t $out/share/applications/
    install -Dm444 src/resources/com.github.weclaw1.ImageRoll.svg -t $out/share/icons/hicolor/scalable/apps/
    install -Dm444 src/resources/com.github.weclaw1.ImageRoll.metainfo.xml -t $out/share/metainfo/
  '';
#+end_src

* common

#+begin_src bash
mkdir -p $out/share/fonts/{opentype,truetype}
unzip -j $downloadedFile -d $out/share/fonts/mononoki
find . -name '*.ttf' -exec install -Dm644 -t $out/share/fonts/truetype {} \;
${placeholder "out"}

for size in 16 32 128 256 512; do
  install -D deps/${pname}/build/icon.iconset/icon_''${size}x''${size}.png \
    $out/share/icons/hicolor/''${size}x''${size}/apps/${pname}.png
done

pushd deps/nightpdf/build/icon.iconset
  for image in *png; do
  mkdir -p $out/share/icons/hicolor/''${image%.png}/apps
  cp -r $image $out/share/icons/hicolor/''${image%.png}/apps/${pname}.png
  done
popd
#+end_src>

* meta
#+begin_src nix
  meta = with lib; {
    description = "";
    longDescription = ''
    '';
    homepage = "";
    mainProgram = "";
    license = licenses.gpl3Plus;
    platforms = platforms.linux;
    maintainers = with maintainers; [ zendo ];
  };
#+end_src
